/**
 * Script para probar espec√≠ficamente las evaluaciones de desempe√±o
 */

const API_BASE = 'https://api-delizia.vercel.app/api';

console.log('üéØ Probando evaluaciones de desempe√±o espec√≠ficamente');
console.log('=' .repeat(60));

async function testEvaluaciones() {
  try {
    console.log('\nüìä 1. Probando GET /evaluaciones...');
    const response = await fetch(`${API_BASE}/evaluaciones`);
    const result = await response.json();
    
    console.log(`Status: ${response.status}`);
    console.log(`Response:`, JSON.stringify(result, null, 2));
    
    if (result.success) {
      console.log(`‚úÖ Evaluaciones cargadas: ${result.count}`);
      
      if (result.data && result.data.length > 0) {
        const evaluacion = result.data[0];
        console.log(`üìã Primera evaluaci√≥n:`);
        console.log(`  - ID: ${evaluacion._id}`);
        console.log(`  - Empleado: ${evaluacion.empleado?.nombre || 'No especificado'}`);
        console.log(`  - Per√≠odo: ${evaluacion.periodo}`);
        console.log(`  - Puntuaci√≥n: ${evaluacion.puntuacion}`);
        
        console.log('\nüìã 2. Probando GET evaluaci√≥n por empleado...');
        const empleadoId = evaluacion.empleado?._id;
        if (empleadoId) {
          const byEmpleadoResponse = await fetch(`${API_BASE}/evaluaciones?empleado=${empleadoId}`);
          const byEmpleadoResult = await byEmpleadoResponse.json();
          
          console.log(`Status: ${byEmpleadoResponse.status}`);
          console.log(`Evaluaciones del empleado: ${byEmpleadoResult.count || 0}`);
        }
        
        console.log('\nüìã 3. Probando GET evaluaci√≥n por ID...');
        const byIdResponse = await fetch(`${API_BASE}/evaluaciones?id=${evaluacion._id}`);
        const byIdResult = await byIdResponse.json();
        
        console.log(`Status: ${byIdResponse.status}`);
        if (byIdResult.success) {
          console.log(`‚úÖ Evaluaci√≥n por ID cargada: ${byIdResult.data?.periodo || 'No encontrada'}`);
        }
      }
    } else {
      console.error(`‚ùå Error cargando evaluaciones:`, result);
    }
    
    console.log('\nüîç 4. Estructura esperada por el frontend:');
    console.log('‚úÖ response.data (array de evaluaciones)');
    console.log('‚úÖ response.count (n√∫mero total)');
    console.log('‚úÖ response.pagination (info de paginaci√≥n)');
    
    console.log('\nüéØ Verificaci√≥n para el frontend:');
    console.log('‚úÖ URL: /evaluaciones (no /desempenos)');
    console.log('‚úÖ Query params para filtros');
    console.log('‚úÖ Estructura { success, count, data, pagination }');
    
  } catch (error) {
    console.error('‚ùå Error durante las pruebas:', error.message);
  }
}

testEvaluaciones();
